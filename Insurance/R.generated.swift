// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import UIKit

struct R {
  static func validate() {
    storyboard.launchScreen.validateImages()
    storyboard.launchScreen.validateViewControllers()
    storyboard.main.validateImages()
    storyboard.main.validateViewControllers()
  }
  
  struct file {
    static var aboutusHtml: NSURL? { return _R.hostingBundle?.URLForResource("aboutus", withExtension: "html") }
    static var agreementHtml: NSURL? { return _R.hostingBundle?.URLForResource("agreement", withExtension: "html") }
    static var autoinsuranceJson: NSURL? { return _R.hostingBundle?.URLForResource("autoinsurance", withExtension: "json") }
    static var autoinsuranceTxt: NSURL? { return _R.hostingBundle?.URLForResource("autoinsurance", withExtension: "txt") }
    static var cityJson: NSURL? { return _R.hostingBundle?.URLForResource("city", withExtension: "json") }
    static var ic_bannerPng: NSURL? { return _R.hostingBundle?.URLForResource("ic_banner", withExtension: "png") }
    static var ic_intro_1Png: NSURL? { return _R.hostingBundle?.URLForResource("ic_intro_1", withExtension: "png") }
    static var ic_intro_2Png: NSURL? { return _R.hostingBundle?.URLForResource("ic_intro_2", withExtension: "png") }
    static var ic_orderPng: NSURL? { return _R.hostingBundle?.URLForResource("ic_order", withExtension: "png") }
    static var ic_user_c120Png: NSURL? { return _R.hostingBundle?.URLForResource("ic_user_c120", withExtension: "png") }
    static var ic_user_c180Png: NSURL? { return _R.hostingBundle?.URLForResource("ic_user_c180", withExtension: "png") }
    static var ic_user_s120Png: NSURL? { return _R.hostingBundle?.URLForResource("ic_user_s120", withExtension: "png") }
    static var ic_user_s180Png: NSURL? { return _R.hostingBundle?.URLForResource("ic_user_s180", withExtension: "png") }
    static var ic_vehiclelicensePng: NSURL? { return _R.hostingBundle?.URLForResource("ic_vehiclelicense", withExtension: "png") }
    static var ic_velicensePng: NSURL? { return _R.hostingBundle?.URLForResource("ic_velicense", withExtension: "png") }
    static var ic_waitPng: NSURL? { return _R.hostingBundle?.URLForResource("ic_wait", withExtension: "png") }
    static var ic_xiaomarPng: NSURL? { return _R.hostingBundle?.URLForResource("ic_xiaomar", withExtension: "png") }
    static var logo_brand_1Png: NSURL? { return _R.hostingBundle?.URLForResource("logo_brand_1", withExtension: "png") }
    static var logo_brand_2Png: NSURL? { return _R.hostingBundle?.URLForResource("logo_brand_2", withExtension: "png") }
    static var logo_brand_3Png: NSURL? { return _R.hostingBundle?.URLForResource("logo_brand_3", withExtension: "png") }
    static var logo_brand_4Png: NSURL? { return _R.hostingBundle?.URLForResource("logo_brand_4", withExtension: "png") }
    static var logo_brand_5Png: NSURL? { return _R.hostingBundle?.URLForResource("logo_brand_5", withExtension: "png") }
    static var logo_brand_6Png: NSURL? { return _R.hostingBundle?.URLForResource("logo_brand_6", withExtension: "png") }
    static var logo_brand_7Png: NSURL? { return _R.hostingBundle?.URLForResource("logo_brand_7", withExtension: "png") }
    static var logo_brand_8Png: NSURL? { return _R.hostingBundle?.URLForResource("logo_brand_8", withExtension: "png") }
    static var logo_brand_9Png: NSURL? { return _R.hostingBundle?.URLForResource("logo_brand_9", withExtension: "png") }
    static var me_portrait_defaultPng: NSURL? { return _R.hostingBundle?.URLForResource("me_portrait_default", withExtension: "png") }
    static var order_statusJson: NSURL? { return _R.hostingBundle?.URLForResource("order_status", withExtension: "json") }
    static var remarkinsuranceJson: NSURL? { return _R.hostingBundle?.URLForResource("remarkinsurance", withExtension: "json") }
    static var totalinsuranceJson: NSURL? { return _R.hostingBundle?.URLForResource("totalinsurance", withExtension: "json") }
  }
  
  struct font {
    
  }
  
  struct image {
    static var ic_banner: UIImage? { return UIImage(named: "ic_banner", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ic_intro_1: UIImage? { return UIImage(named: "ic_intro_1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ic_intro_2: UIImage? { return UIImage(named: "ic_intro_2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ic_order: UIImage? { return UIImage(named: "ic_order", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ic_tab_compare: UIImage? { return UIImage(named: "ic_tab_compare", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ic_tab_discover: UIImage? { return UIImage(named: "ic_tab_discover", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ic_tab_female: UIImage? { return UIImage(named: "ic_tab_female", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ic_tab_home: UIImage? { return UIImage(named: "ic_tab_home", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ic_tab_me: UIImage? { return UIImage(named: "ic_tab_me", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ic_tab_plane: UIImage? { return UIImage(named: "ic_tab_plane", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ic_user_c120: UIImage? { return UIImage(named: "ic_user_c120", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ic_user_c180: UIImage? { return UIImage(named: "ic_user_c180", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ic_user_s120: UIImage? { return UIImage(named: "ic_user_s120", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ic_user_s180: UIImage? { return UIImage(named: "ic_user_s180", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ic_vehiclelicense: UIImage? { return UIImage(named: "ic_vehiclelicense", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ic_velicense: UIImage? { return UIImage(named: "ic_velicense", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ic_wait: UIImage? { return UIImage(named: "ic_wait", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ic_xiaomar: UIImage? { return UIImage(named: "ic_xiaomar", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var logo_brand_1: UIImage? { return UIImage(named: "logo_brand_1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var logo_brand_2: UIImage? { return UIImage(named: "logo_brand_2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var logo_brand_3: UIImage? { return UIImage(named: "logo_brand_3", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var logo_brand_4: UIImage? { return UIImage(named: "logo_brand_4", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var logo_brand_5: UIImage? { return UIImage(named: "logo_brand_5", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var logo_brand_6: UIImage? { return UIImage(named: "logo_brand_6", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var logo_brand_7: UIImage? { return UIImage(named: "logo_brand_7", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var logo_brand_8: UIImage? { return UIImage(named: "logo_brand_8", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var logo_brand_9: UIImage? { return UIImage(named: "logo_brand_9", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var me_portrait_default: UIImage? { return UIImage(named: "me_portrait_default", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
  }
  
  struct nib {
    
  }
  
  struct reuseIdentifier {
    
  }
  
  struct segue {
    static var segueDiscoverCard_list: String { return "segue.discover-card_list" }
    static var segueHomeProduct_detail: String { return "segue.home-product_detail" }
    static var segueMeOrder_list: String { return "segue.me-order_list" }
    static var segueMeProfile: String { return "segue.me-profile" }
    static var segueMeSettings: String { return "segue.me-settings" }
    static var segueMeVehicle_list: String { return "segue.me-vehicle_list" }
    static var segueOrder_listOrder_detail: String { return "segue.order_list-order_detail" }
    static var segueProduct_detailOrder_create: String { return "segue.product_detail-order_create" }
    static var segueSettingsAbout: String { return "segue.settings-about" }
    static var segueSign_up: String { return "segue.sign_up" }
    static var segueVehicle_listVehicle_create: String { return "segue.vehicle_list-vehicle_create" }
  }
  
  struct storyboard {
    struct launchScreen {
      static var initialViewController: UIViewController? { return instance.instantiateInitialViewController() }
      static var instance: UIStoryboard { return UIStoryboard(name: "LaunchScreen", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "ic_xiaomar.png") != nil, "[R.swift] Image named 'ic_xiaomar.png' is used in storyboard 'LaunchScreen', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct main {
      static var card_list: SimpleCardList? { return instance.instantiateViewControllerWithIdentifier("card_list") as? SimpleCardList }
      static var initialViewController: Main? { return instance.instantiateInitialViewController() as? Main }
      static var instance: UIStoryboard { return UIStoryboard(name: "Main", bundle: _R.hostingBundle) }
      static var sign_in: SignIn? { return instance.instantiateViewControllerWithIdentifier("sign_in") as? SignIn }
      
      static func validateImages() {
        assert(UIImage(named: "ic_tab_discover") != nil, "[R.swift] Image named 'ic_tab_discover' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "ic_tab_plane") != nil, "[R.swift] Image named 'ic_tab_plane' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "ic_tab_compare") != nil, "[R.swift] Image named 'ic_tab_compare' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "ic_tab_home") != nil, "[R.swift] Image named 'ic_tab_home' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "ic_tab_me") != nil, "[R.swift] Image named 'ic_tab_me' is used in storyboard 'Main', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(card_list != nil, "[R.swift] ViewController with identifier 'card_list' could not be loaded from storyboard 'Main' as 'SimpleCardList'.")
        assert(sign_in != nil, "[R.swift] ViewController with identifier 'sign_in' could not be loaded from storyboard 'Main' as 'SignIn'.")
      }
    }
  }
}

struct _R {
  static var hostingBundle: NSBundle? { return NSBundle(identifier: "com.xiaomar.Insurance") }
  
  struct nib {
    
  }
}

struct ReuseIdentifier<T>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

protocol NibResource {
  var instance: UINib { get }
  var name: String { get }
}

protocol Reusable {
  typealias T
  
  var reuseIdentifier: ReuseIdentifier<T> { get }
}

extension UITableView {
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath?) -> T? {
    if let indexPath = indexPath {
      return dequeueReusableCellWithIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
    }
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableHeaderFooterViewWithIdentifier<T : UITableViewHeaderFooterView>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableHeaderFooterViewWithIdentifier(identifier.identifier) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibForHeaderFooterView<T: NibResource where T: Reusable, T.T: UIView>(nibResource: T) {
    registerNib(nibResource.instance, forHeaderFooterViewReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
}

extension UICollectionView {
  func dequeueReusableCellWithReuseIdentifier<T: UICollectionViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableCellWithReuseIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func dequeueReusableSupplementaryViewOfKind<T: UICollectionReusableView>(elementKind: String, withReuseIdentifier identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableSupplementaryViewOfKind(elementKind, withReuseIdentifier: identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellWithReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResource: T, forSupplementaryViewOfKind kind: String) {
    registerNib(nibResource.instance, forSupplementaryViewOfKind: kind, withReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResources: [T], forSupplementaryViewOfKind kind: String) {
    nibResources.forEach { self.registerNib($0, forSupplementaryViewOfKind: kind) }
  }
}

extension UIViewController {
  convenience init(nib: NibResource) {
    self.init(nibName: nib.name, bundle: _R.hostingBundle)
  }
}